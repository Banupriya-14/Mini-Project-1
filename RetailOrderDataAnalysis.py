import streamlit as st
import pandas as pd
import pymysql
from sqlalchemy import create_engine

# database connection
def get_connection():
    connection = pymysql.connect(
        host = "gateway01.us-east-1.prod.aws.tidbcloud.com",
        port = 4000,
        user = "3Fz5G68Pg3hrxVy.root",
        password = "NRYFQxmcwGY25A1R",
        database = "PROJECT1",
        ssl_verify_cert = True,
        ssl_verify_identity = True,
        ssl_ca =r"C:\Users\User\Downloads\MDTM40\isrgrootx1.pem"
    )
    return connection

# function to fetch data from sql
def fetch_data(query):
    conn= get_connection()
    df = pd.read_sql(query,conn)
    conn.close()
    return df

#Streamlit UIT
st.title("**:rainbow[Retail Order Data Analysis]**")



#sidebar filters
st.sidebar.header("Analysis Report")

#Predefined SQL queries for selection
queries={
    "1. Find top 10 highest revenue generating products" : "select Product_Id, Highest_Revenue, Row_number() over (order by Highest_Revenue desc) as Row_num from (SELECT Product_Id, sum(sale) Highest_Revenue from PROJECT1.retailorder group by Product_Id ORDER by 2 desc FETCH FIRST 10 ROWS ONLY) as temp;",
    "2. Find the top 5 cities with the highest profit margins":"Select city, sum(profit) Highest_Profit from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id group by city order by 2 desc limit 5;",
    "3. Calculate the total discount given for each category":"select Category, sum(Discount) Total_Discount from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id group by category;",
    "4. Find the average sale price per product category":"SELECT Category, avg(sale) Average_sale_Price from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id group by category;",
    "5. Find the region with the highest average sale price":"SELECT Region,avg(sale) Highest_AvgSale_Price from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id group by Region order by 2 desc limit 1;",
    "6. Find the total profit per category":"Select Category,sum(profit) Total_Profit from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id group by category order by 2;",
    "7. Identify the top 3 segments with the highest quantity of orders":"select Segment, sum(Quantity) Highest_Quantity from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id group by Segment order by 2 desc LIMIT 3;",
    "8. Determine the average discount percentage given per region":"SELECT Region, avg(Discount_Percent) Avg_Discount_Percent from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id group by Region;",
    "9. Find the product category with the highest total profit":"SELECT * from (SELECT Category, sum(Profit) Highest_Total_Profit from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id group by Category ORDER BY 2 desc) as temp FETCH FIRST 1 ROW ONLY;",
    "10. Calculate the total revenue generated per year":"select year(Order_Date) Year, sum(Sale) Total_revenue from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id group by year(Order_Date);"
}

queries1={
    "11.Identify the most frequently used shipment mode (excluding 'Unknown Mode') along with the number of times it was used.":"select Ship_Mode, count(Ship_Mode) No_of_Times from PROJECT1.orders where Ship_Mode in ('Standard Class','Second Class', 'First Class', 'Same Day') group by Ship_Mode order by 2 desc;",
    "12. Find the total revenue generated by each product category in the 'West' region.":"select Category, sum(sale) Total_revenu_West from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id where region='West' group by category order by 2;",
    "13. Identify the top 3 products with the highest discount percentage.":"select Product_Id, max(Discount_Percent) Highest_Discount from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id group by Product_Id order by 2 desc limit 3;",
    "14. Find the number of orders placed in each month of the year 2023. sorted chronologically from January to December.":"select monthname(Order_Date) 'Month', count(*) Total_Order_Placed from PROJECT1.orders where year(Order_Date)='2023' group by month(Order_Date),monthname(Order_Date) order by month(Order_Date);",
    "15. Identify the region with the lowest total revenue.":"SELECT Region, sum(sale) Lowest_Revenue from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id group by region order by 2  limit 1 ;",
    "16. Find the percentage contribution of each shipping mode to the total number of orders.":"SELECT Ship_Mode, concat(round(count(*)*100.0/sum(count(*)) over(),2),'%') Percentage_Contribution from PROJECT1.orders group by Ship_Mode order by 2 desc;",
    "17. Identify the product that contributed the highest total profit in the 'Technology' category.":"SELECT Category, Product_Id, sum(Profit) Total_Profit from  PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id where category='Technology' group by category, product_id order by 3 desc;",
    "18. Calculate the average profit margin for each product category":"select Category, avg(Profit) Average_Profit from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id group by category;",
    "19. List all orders where the sale amount exceeded $500 and the profit was negative.":"select r.Order_Id, Sale, Profit from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id where Sale>500 and Profit like '-%' order by sale;",
    "20. Classify the total profit for each product category":"select Category, CASE WHEN sum(Profit)>1000 THEN 'High Profit' WHEN sum(Profit) between 500 and 1000 THEN 'Moderate Profit' ELSE 'Low Profit' END as Profit_Category  from PROJECT1.Retailorder r inner join PROJECT1.Orders o on r.Order_Id=o.Order_Id group by category;"
}


# Button to execute the selected query(Fetch and display data)
r=st.sidebar.radio("Queries",["Set1","Set2"])
if r=="Set1":
    selected_query = st.sidebar.selectbox("Select a query - Set1:", list(queries.keys())) # Dropdown to select a query
    if st.sidebar.button("Run Query"):
        with st.spinner("Fetching data..."):
            df = fetch_data(queries[selected_query])
            st.text(selected_query)
            st.success("Query executed successfully")
            st.dataframe(df)

if r=="Set2":
    selected_query1 = st.sidebar.selectbox("Select a query - Set2:", list(queries1.keys())) # Dropdown to select a query
    if st.sidebar.button("Run Query"):
        with st.spinner("Fetching data..."):
            df = fetch_data(queries1[selected_query1])
            st.text(selected_query1)
            st.success("Query executed successfully")
            st.dataframe(df)





